#!/usr/bin/python3

import argparse, requests, re, os, sys, difflib, time
from urllib.parse import urljoin


def get_form(form):
    details = {
        "action": form.attrs.get("action", "").lower(),
        "method": form.attrs.get("method", "get").lower()
    }
    inputs = [
        {"type": input_tag.attrs.get("type", "text"), 
         "name": input_tag.attrs.get("name"),
         "value": input_tag.attrs.get("value", "")}
        for input_tag in form.find_all("input")
    ]
    details["inputs"] = inputs
    
    return details


def detect_database(url, type):
    payloads = ["'", "\"", "`", "\\", "/*'*/", ")'"]
    
    try:
        parse = bs(s.get(url).content, "html.parser")
        forms =  parse.find_all("form")
        for payload in payloads:
            target_url = urljoin(url, details["action"])
            data = {}
            for input_tag in details["inputs"]:
                if input_tag["type"] == "text" or input_tag["type"] == "search":
                    data[input_tag["name"]] = payload
                else:
                    data[input_tag["name"]] = "test"
            if type == "POST":
                response = requests.post(target_url, data=data)
            else:
                response =  requests.get(target_url, params=data)

        print(response)
        
    except requests.exceptions.RequestException as e:
        print(f"Error during database detection: {e}")
        return None

    return None


def vaccine(url, type):
    db_engine = detect_database(url, type)
    if not db_engine:
        print("Database engine detection failed.")
        return
    
    try:
        payload = "' UNION SELECT"

    except Exception as e:
        print(f"Error: {str(e)}")



def validate_args(args):
    if not args.url.startswith(('https://', 'http://')):
        args.url = 'http://' + args.url
    args.X = args.X.upper()
    if args.X != 'POST' and args.X != 'GET':
        print(f"Request type {args.X} not supported")
        sys.exit(1)


def store_results(results, filename):
    with open(filename, 'wb') as file:
        for result in results:
            file.write(result + "\n")
        print(f"Reults writes in {filename}")


def parse_arguments():
    parser = argparse.ArgumentParser("Vaccine programme for testing SQL security")
    parser.add_argument('-o', type=str, default='archive.txt', help="Archive file")
    parser.add_argument('-X', type=str, default='GET', help="Type of request")
    parser.add_argument('url', help="url targeted")
    return parser.parse_args()


def main():
    global url
    args = parse_arguments()
    validate_args(args)
    url = args.url
    vaccine(url, args.X)


if __name__ == "__main__":
    main()

    